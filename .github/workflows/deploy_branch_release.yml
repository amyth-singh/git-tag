name: deploy_branch_release
on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type:'
        required: true
        type: choice
        options:
        - major
        - minor
        - patch
        - hotfix
        default: 'patch'
jobs:
  create_release_branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Determine base branch
        id: base_branch
        run: |
          if [[ "${{ github.event.inputs.release_type }}" == "hotfix" ]]; then
            echo "base_branch=main" >> $GITHUB_OUTPUT
          else
            echo "base_branch=develop" >> $GITHUB_OUTPUT
          fi
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Switch to base branch
        run: |
          git fetch origin
          git checkout ${{ steps.base_branch.outputs.base_branch }}
          git pull origin ${{ steps.base_branch.outputs.base_branch }}
      - name: Display base branch information
        run: |
          echo "Creating ${{ github.event.inputs.release_type }} release branch from ${{ steps.base_branch.outputs.base_branch }} branch"
      - name: Get current version
        id: get_version
        run: |
          current_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Current version: $current_version"
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
      - name: Calculate new version
        id: calc_version
        run: |
          current_version=${{ steps.get_version.outputs.current_version }}
          release_type=${{ github.event.inputs.release_type }}
          
          IFS='.' read -ra version_parts <<< "${current_version#v}"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          
          case $release_type in
            major)
              new_version="$((major + 1)).0.0"
              ;;
            minor)
              new_version="${major}.$((minor + 1)).0"
              ;;
            patch|hotfix)
              new_version="${major}.${minor}.$((patch + 1))"
              ;;
          esac
          
          echo "New version: v$new_version"
          echo "new_version=v$new_version" >> $GITHUB_OUTPUT
      - name: Determine new branch name
        id: branch_name
        run: |
          release_type=${{ github.event.inputs.release_type }}
          new_version="${{ steps.calc_version.outputs.new_version }}"
          if [[ "$release_type" == "hotfix" ]]; then
            new_branch="main-hotfix-${new_version}"
          else
            new_branch="release-${release_type}-${new_version}"
          fi
          echo "new_branch=$new_branch" >> $GITHUB_OUTPUT
      - name: Check if branch exists
        id: check_branch
        run: |
          new_branch="${{ steps.branch_name.outputs.new_branch }}"
          if git ls-remote --exit-code --heads origin $new_branch; then
            echo "Branch $new_branch already exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Branch $new_branch does not exist"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Create and push release branch
        if: steps.check_branch.outputs.branch_exists == 'false'
        id: create_branch
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          new_branch="${{ steps.branch_name.outputs.new_branch }}"
          git checkout -b $new_branch
          git push -u origin $new_branch
          echo "Created and pushed new branch: $new_branch based on ${{ steps.base_branch.outputs.base_branch }} branch"
          echo "branch_name=$new_branch" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: Send Slack Notification
      #   if: steps.check_branch.outputs.branch_exists == 'false'
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     text: New branch created: ${{ steps.create_branch.outputs.branch_name }}
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      - name: Error if branch exists
        if: steps.check_branch.outputs.branch_exists == 'true'
        run: |
          new_branch="${{ steps.branch_name.outputs.new_branch }}"
          echo "Error: Branch $new_branch already exists"
          exit 1
