name: on_merge_to_main

on:
  pull_request:
    types:
      - closed
    branches:
      - main_test

permissions:
  contents: write
  packages: read
  actions: read
  id-token: write

jobs:
  process_merge:
    if: github.event.pull_request.merged == true && (contains(github.event.pull_request.head.ref, 'major') || contains(github.event.pull_request.head.ref, 'minor') || contains(github.event.pull_request.head.ref, 'patch') || contains(github.event.pull_request.head.ref, 'hotfix'))
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.get_merge_info.outputs.release_type }}
      version: ${{ steps.calc_version.outputs.new_version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Fetch all tags and branches
      run: |
        git fetch --tags
        git fetch --all

    - name: Get merge source branch and determine release type
      id: get_merge_info
      run: |
        source_branch="${{ github.event.pull_request.head.ref }}"
        echo "Source branch: $source_branch"
        
        if [[ $source_branch == *major* ]]; then
          release_type="major"
        elif [[ $source_branch == *minor* ]]; then
          release_type="minor"
        elif [[ $source_branch == *patch* || $source_branch == *hotfix* ]]; then
          release_type="patch"
        else
          release_type="patch"
        fi
        
        echo "release_type=${release_type}" >> $GITHUB_OUTPUT
        echo "Release type determined: ${release_type}"

    - name: Get current version
      id: get_version
      run: |
        current_version=$(git ls-remote --tags origin | grep -i production | sed 's/.*refs\/tags\/production-v\{0,1\}//g' | sort -V | tail -n 1 | sed 's/^/production-v/' | sed 's/\^{}$//')
        if [ -z "$current_version" ]; then
          current_version="production-v0.0.0"
        fi
        echo "Current version: $current_version"
        echo "current_version=$current_version" >> $GITHUB_OUTPUT

    - name: Calculate new version
      id: calc_version
      run: |
        current_version=${{ steps.get_version.outputs.current_version }}
        release_type=${{ steps.get_merge_info.outputs.release_type }}
        IFS='.' read -ra version_parts <<< "${current_version#v}"
        major=${version_parts[0]}
        minor=${version_parts[1]}
        patch=${version_parts[2]}
        case $release_type in
          major) new_version="$((major + 1)).0.0" ;;
          minor) new_version="${major}.$((minor + 1)).0" ;;
          patch|hotfix) new_version="${major}.${minor}.$((patch + 1))" ;;
        esac
        echo "New version: v$new_version"
        echo "new_version=v$new_version" >> $GITHUB_OUTPUT

  push_changes:
    needs: process_merge
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Push changes to repository
      run: git push origin main_test

  create_and_push_tag:
    needs: push_changes
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    - name: Create and push tag
      run: |
        new_tag="${{ needs.process_merge.outputs.version }}"
        if git rev-parse "$new_tag" >/dev/null 2>&1; then
          echo "Tag $new_tag already exists. Skipping tag creation."
          exit 0
        else
          git tag -a "$new_tag" -m "$new_tag"
          git push origin "$new_tag"
          echo "Created and pushed tag $new_tag"
        fi

  generate_release_notes:
    needs: [push_changes, create_and_push_tag]
    runs-on: ubuntu-latest
    steps:
    - name: Generate release notes and create release
      uses: release-drafter/release-drafter@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        config-name: release-drafter.yml
        version: ${{ needs.process_merge.outputs.version }}
        tag: ${{ needs.process_merge.outputs.version }}
        name: ${{ needs.process_merge.outputs.version }}
        publish: true
