name: version-number-validator
on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type (major/minor/patch)'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
permissions:
  contents: write
  packages: read
  actions: read
  id-token: write
jobs:
  create-tag-and-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Ensure running on main branch
      run: |
        if [ "${{ github.ref }}" != "refs/heads/main" ]; then
          echo "This workflow must be run on the main branch."
          exit 1
        fi
    - name: Set up Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    - name: Fetch all tags
      run: git fetch --tags
    - name: Generate new version
      id: generate_version
      run: |
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $latest_tag"
        
        IFS='.' read -r major minor patch <<< "${latest_tag#v}"
        
        case "${{ github.event.inputs.release_type }}" in
          major)
            new_version="$((major + 1)).0.0"
            ;;
          minor)
            new_version="${major}.$((minor + 1)).0"
            ;;
          patch)
            new_version="${major}.${minor}.$((patch + 1))"
            ;;
          *)
            echo "Invalid release type"
            exit 1
            ;;
        esac
        
        echo "new_version=${new_version}" >> $GITHUB_OUTPUT
        echo "New version: v${new_version}"
    - name: Create and push tag
      run: |
        new_tag="v${{ steps.generate_version.outputs.new_version }}"
        git tag -a "$new_tag" -m "Release $new_tag"
        git push origin "$new_tag"
    - name: Generate initial release notes
      uses: release-drafter/release-drafter@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        config-name: release-drafter.yml
        version: ${{ steps.generate_version.outputs.new_version }}
        tag: v${{ steps.generate_version.outputs.new_version }}
        name: Release v${{ steps.generate_version.outputs.new_version }}
        publish: false
      id: release_drafter
    - name: Prepare release notes
      id: prep_notes
      run: |
        bugs=$(echo '${{ steps.release_drafter.outputs.body }}' | sed -n '/### Bugs Fixed/,/### /p' | sed '1d;$d')
        terraform=$(echo '${{ steps.release_drafter.outputs.body }}' | sed -n '/### Terraform and AWS/,/### /p' | sed '1d;$d')
        features=$(echo '${{ steps.release_drafter.outputs.body }}' | sed -n '/### Features Released/,/## /p' | sed '1d;$d')
        echo "bugs<<EOF" >> $GITHUB_OUTPUT
        echo "$bugs" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "terraform<<EOF" >> $GITHUB_OUTPUT
        echo "$terraform" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "features<<EOF" >> $GITHUB_OUTPUT
        echo "$features" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    - name: Update and publish release
      uses: release-drafter/release-drafter@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        config-name: release-drafter.yml
        version: ${{ steps.generate_version.outputs.new_version }}
        tag: v${{ steps.generate_version.outputs.new_version }}
        name: Release v${{ steps.generate_version.outputs.new_version }}
        publish: true
        prerelease: false
        commitish: ${{ github.sha }}
        changes: |
          bugs: ${{ steps.prep_notes.outputs.bugs }}
          terraform: ${{ steps.prep_notes.outputs.terraform }}
          features: ${{ steps.prep_notes.outputs.features }}
    - name: Push changes to repository
      run: git push origin main
