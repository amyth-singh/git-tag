name: create-release-branch-from-develop

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
        - major
        - minor
        - patch
        default: 'minor'

jobs:
  create_release_branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current version
        id: get_version
        run: |
          # Try to get the latest tag from the Git repository
          current_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Current version: $current_version"
          
          # If no tags exist, get the latest release from GitHub API
          if [[ "$current_version" == "v0.0.0" ]]; then
            release_version=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
            if [[ "$release_version" == "null" ]]; then
              # Default version if no release found
              release_version="v0.0.0"
            fi
            echo "Using latest release version: $release_version"
            current_version=$release_version
          fi

          # Find the latest release branch
          latest_branch=$(git branch -r | grep 'origin/release-' | sort | tail -n 1 | sed 's/origin\///')
          if [[ -n "$latest_branch" ]]; then
            echo "Latest release branch: $latest_branch"
            latest_version=$(echo "$latest_branch" | sed -e 's/release-.*-v//')
            echo "latest_version=$latest_version" >> $GITHUB_OUTPUT
          else
            echo "No existing release branches found"
            echo "latest_version=v0.0.0" >> $GITHUB_OUTPUT
          fi

          echo "current_version=$current_version" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: calc_version
        run: |
          current_version=${{ steps.get_version.outputs.current_version }}
          latest_version=${{ steps.get_version.outputs.latest_version }}
          release_type=${{ github.event.inputs.release_type }}
          
          IFS='.' read -ra version_parts <<< "${latest_version#v}"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          
          case $release_type in
            major)
              new_version="$((major + 1)).0.0"
              ;;
            minor)
              new_version="${major}.$((minor + 1)).0"
              ;;
            patch)
              new_version="${major}.${minor}.$((patch + 1))"
              ;;
          esac
          
          echo "New version: v$new_version"
          echo "new_version=v$new_version" >> $GITHUB_OUTPUT

      - name: Check if branch exists
        id: check_branch
        run: |
          release_type=${{ github.event.inputs.release_type }}
          new_version="${{ steps.calc_version.outputs.new_version }}"
          new_branch="release-${release_type}-${new_version}"
          if git ls-remote --exit-code --heads origin $new_branch; then
            echo "Branch $new_branch already exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Branch $new_branch does not exist"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and push release branch
        if: steps.check_branch.outputs.branch_exists == 'false'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          release_type=${{ github.event.inputs.release_type }}
          new_version="${{ steps.calc_version.outputs.new_version }}"
          new_branch="release-${release_type}-${new_version}"
          git checkout -b $new_branch origin/develop
          git push -u origin $new_branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Error if branch exists
        if: steps.check_branch.outputs.branch_exists == 'true'
        run: |
          release_type=${{ github.event.inputs.release_type }}
          new_version="${{ steps.calc_version.outputs.new_version }}"
          echo "Error: Branch release-${release_type}-${new_version} already exists"
          exit 1
