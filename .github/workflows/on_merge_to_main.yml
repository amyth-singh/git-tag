name: on_merge_to_main
on:
  pull_request:
    types:
      - closed
    branches:
      - main
permissions:
  contents: write
  packages: read
  actions: read
  id-token: write
jobs:
  process_merge:
    if: github.event.pull_request.merged == true && (contains(github.event.pull_request.head.ref, 'major') || contains(github.event.pull_request.head.ref, 'minor') || contains(github.event.pull_request.head.ref, 'patch') || contains(github.event.pull_request.head.ref, 'hotfix'))
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.get_merge_info.outputs.release_type }}
      version: ${{ steps.get_merge_info.outputs.version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Fetch all tags and branches
      run: |
        git fetch --tags
        git fetch --all
    - name: Get merge source branch and determine release type
      id: get_merge_info
      run: |
        source_branch="${{ github.event.pull_request.head.ref }}"
        echo "Source branch: $source_branch"
        
        if [[ $source_branch == *major* ]]; then
          release_type="major"
        elif [[ $source_branch == *minor* ]]; then
          release_type="minor"
        elif [[ $source_branch == *patch* || $source_branch == *hotfix* ]]; then
          release_type="patch"
        else
          release_type="patch"
        fi
        
        version=$(echo $source_branch | grep -oP 'v\K[0-9]+\.[0-9]+\.[0-9]+' || echo "")
        
        echo "release_type=${release_type}" >> $GITHUB_OUTPUT
        echo "version=${version}" >> $GITHUB_OUTPUT
        echo "Release type determined: ${release_type}"
        echo "Version from branch: ${version}"

  create_and_push_tag:
    needs: process_merge
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    - name: Create and push tag
      run: |
        version="${{ needs.process_merge.outputs.version }}"
        if [ -z "$version" ]; then
          echo "No version specified in the branch name. Skipping tag creation."
          exit 0
        fi
        
        new_tag="v${version}"
        if git rev-parse "$new_tag" >/dev/null 2>&1; then
          echo "Tag $new_tag already exists. Skipping tag creation."
          exit 0
        else
          git tag -a "$new_tag" -m "Release $new_tag"
          git push origin "$new_tag"
          echo "Created and pushed tag $new_tag"
        fi

  generate_release_notes:
    needs: process_merge
    runs-on: ubuntu-latest
    steps:
    - name: Generate release notes and create release
      uses: release-drafter/release-drafter@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        config-name: release-drafter.yml
        version: ${{ needs.process_merge.outputs.version }}
        tag: v${{ needs.process_merge.outputs.version }}
        name: Release v${{ needs.process_merge.outputs.version }}
        publish: true

  push_changes:
    needs: [create_and_push_tag, generate_release_notes]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Push changes to repository
      run: git push origin main