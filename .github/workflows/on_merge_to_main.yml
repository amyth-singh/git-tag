name: on_merge_to_main

on:
  push:
    branches:
      - develop

permissions:
  contents: write
  packages: read
  actions: read
  id-token: write

jobs:
  create-tag-and-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Fetch all tags and branches
      run: |
        git fetch --tags
        git fetch --all

    - name: Get merge source branch and determine release type
      id: get_merge_info
      run: |
        merge_commit=$(git log -1 --merges)
        if [ -z "$merge_commit" ]; then
          echo "This push is not a merge. Exiting."
          exit 0
        fi
        source_branch=$(echo "$merge_commit" | grep -oP "Merge branch '\K[^']+")
        echo "Source branch: $source_branch"
        
        if [[ $source_branch == *"/feature/"* ]]; then
          release_type="minor"
        elif [[ $source_branch == *"/bugfix/"* || $source_branch == *"/hotfix/"* ]]; then
          release_type="patch"
        else
          release_type="patch"  # Default to patch if branch type is unclear
        fi
        
        echo "release_type=${release_type}" >> $GITHUB_OUTPUT
        echo "Release type determined: ${release_type}"

    - name: Generate new version
      id: generate_version
      run: |
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $latest_tag"
        
        IFS='.' read -r major minor patch <<< "${latest_tag#v}"
        
        case "${{ steps.get_merge_info.outputs.release_type }}" in
          major)
            new_version="$((major + 1)).0.0"
            ;;
          minor)
            new_version="${major}.$((minor + 1)).0"
            ;;
          patch)
            new_version="${major}.${minor}.$((patch + 1))"
            ;;
          *)
            echo "Invalid release type"
            exit 1
            ;;
        esac
        
        echo "new_version=${new_version}" >> $GITHUB_OUTPUT
        echo "New version: v${new_version}"

    - name: Create and push tag
      run: |
        new_tag="v${{ steps.generate_version.outputs.new_version }}"
        git tag -a "$new_tag" -m "Release $new_tag"
        git push origin "$new_tag"

    - name: Generate release notes and create release
      uses: release-drafter/release-drafter@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        config-name: release-drafter.yml
        version: ${{ steps.generate_version.outputs.new_version }}
        tag: v${{ steps.generate_version.outputs.new_version }}
        name: Release v${{ steps.generate_version.outputs.new_version }}
        publish: true

    - name: Push changes to repository
      run: git push origin develop