name: develop-to-release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
        - major
        - minor
        - patch
        default: 'minor'

jobs:
  create_release_branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current version
        id: get_version
        run: |
          # Get all release branches
          release_branches=$(git branch -r | grep origin/release- | sort -V)
          
          if [ -n "$release_branches" ]; then
            # Get the latest branch for each type
            latest_major=$(echo "$release_branches" | grep 'release-major-' | tail -n1)
            latest_minor=$(echo "$release_branches" | grep 'release-minor-' | tail -n1)
            latest_patch=$(echo "$release_branches" | grep 'release-patch-' | tail -n1)
            
            # Determine which branch to use based on release type
            release_type="${{ github.event.inputs.release_type }}"
            case $release_type in
              major)
                if [ -n "$latest_major" ]; then
                  current_branch=$latest_major
                elif [ -n "$latest_minor" ]; then
                  current_branch=$latest_minor
                elif [ -n "$latest_patch" ]; then
                  current_branch=$latest_patch
                else
                  current_branch=""
                fi
                ;;
              minor)
                if [ -n "$latest_major" ]; then
                  current_branch=$latest_major
                elif [ -n "$latest_minor" ]; then
                  current_branch=$latest_minor
                elif [ -n "$latest_patch" ]; then
                  current_branch=$latest_patch
                else
                  current_branch=""
                fi
                ;;
              patch)
                if [ -n "$latest_minor" ]; then
                  current_branch=$latest_minor
                elif [ -n "$latest_patch" ]; then
                  current_branch=$latest_patch
                elif [ -n "$latest_major" ]; then
                  current_branch=$latest_major
                else
                  current_branch=""
                fi
                ;;
            esac
            
            if [ -n "$current_branch" ]; then
              current_version=$(echo "$current_branch" | sed -E 's/.*release-[^-]+-v(.*)/\1/')
              echo "Using version from branch: $current_branch"
            else
              current_version=""
            fi
          else
            current_version=""
          fi
          
          if [ -z "$current_version" ]; then
            # If no suitable branch found, get the latest release version
            current_version=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name | sed 's/^v//')
            if [ "$current_version" = "null" ]; then
              current_version="0.0.0"
            fi
            echo "No suitable branch found. Using latest release version: $current_version"
          fi
          
          echo "Current version: $current_version"
          echo "current_version=$current_version" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: calc_version
        run: |
          current_version=${{ steps.get_version.outputs.current_version }}
          release_type=${{ github.event.inputs.release_type }}
          
          IFS='.' read -ra version_parts <<< "$current_version"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          
          case $release_type in
            major)
              new_version="$((major + 1)).0.0"
              ;;
            minor)
              new_version="${major}.$((minor + 1)).0"
              ;;
            patch)
              new_version="${major}.${minor}.$((patch + 1))"
              ;;
          esac
          
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Check if branch exists
        id: check_branch
        run: |
          release_type=${{ github.event.inputs.release_type }}
          new_version="${{ steps.calc_version.outputs.new_version }}"
          new_branch="release-${release_type}-v${new_version}"
          if git ls-remote --exit-code --heads origin $new_branch; then
            echo "Branch $new_branch already exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Branch $new_branch does not exist"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and push release branch
        if: steps.check_branch.outputs.branch_exists == 'false'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          release_type=${{ github.event.inputs.release_type }}
          new_version="${{ steps.calc_version.outputs.new_version }}"
          new_branch="release-${release_type}-v${new_version}"
          git checkout -b $new_branch origin/develop
          git push -u origin $new_branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Error if branch exists
        if: steps.check_branch.outputs.branch_exists == 'true'
        run: |
          release_type=${{ github.event.inputs.release_type }}
          new_version="${{ steps.calc_version.outputs.new_version }}"
          echo "Error: Branch release-${release_type}-v${new_version} already exists"
          exit 1
